{"version":3,"sources":["components/Navigation.js","components/Home.js","components/Temperature.js","components/Forecast.js","components/Main.js","components/LocationSearchForm.js","App.js","reportWebVitals.js","index.js"],"names":["Navigation","exact","activeClassName","to","Home","className","Temperature","location","TEMPERATURE_URL","baseUrl","useState","result","setResult","errorMsg","setErrorMsg","useEffect","fetch","method","mode","then","response","json","cod","message","catch","error","console","log","locationDisplay","data","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","name","sys","country","weather","length","main","currentTemperature","temp","weatherClass","Math","round","Forecast","FORECAST_URL","forecast","setForecast","axios","parseInt","list","arraysMaxMin","i","floor","forecastDate","dt_txt","push","max_temp","min_temp","currentMinTemperature","temp_min","currentMaxTemperature","temp_max","forecastDisplay","map","dailyForecast","index","weatherCondition","forecastClass","Main","path","component","LocationSearchForm","props","currentCity","setCurrentCity","onSubmit","event","preventDefault","searchCurrentCityCallBack","type","placeholder","onChange","target","value","BASE_URL","App","setLocation","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4415672e.chunk.js","sourcesContent":["import { NavLink } from 'react-router-dom';\n\nconst Navigation = () => (\n  <nav>\n    <ul>\n      <li><NavLink exact activeClassName='current' to='/'>Home</NavLink></li>\n      <li><NavLink exact activeClassName='current' to='/temperature'>Temperature</NavLink></li>\n      <li><NavLink exact activeClassName='current' to='/forecast'>Forecast</NavLink></li>\n    </ul>\n  </nav>\n);\n\nexport default Navigation;","import React from 'react';\n\nconst Home = () => (\n  <div className='home-page'>\n    <h1>This is my homepage</h1>\n  </div>\n  \n);\n\nexport default Home;","import React, { useState, useEffect } from 'react';\n\nconst Temperature = ({location, baseUrl}) => {\n  const TEMPERATURE_URL = baseUrl + 'temperature?currentCity='\n  const[result, setResult] = useState(null);\n  const[errorMsg, setErrorMsg] = useState(null);\n  \n  useEffect(() => {\n    // if there is no location, exit\n    if (!location) {return}  \n\n    fetch(TEMPERATURE_URL + location,  { method: 'get', mode: 'cors'})\n      .then(response => response.json())\n      .then(result => {\n        if(result.cod === 200) {\n          setErrorMsg(null);\n          setResult(result);\n        } else {\n          setResult(null);\n          setErrorMsg(result.message);\n        }\n      })\n      .catch((error) => {\n        setErrorMsg(error.message);\n        console.log(error.message);\n      });\n  }, [location, TEMPERATURE_URL]);\n\n  const dateBuilder= (data) => {\n    let months = [\n      'January', 'February', 'March', 'April', 'May', 'June', 'July', \n      'August', 'September', 'October', 'November', 'December'\n    ];\n    let days = [\n      'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'\n    ];\n\n    let day = days[data.getDay()];\n    let date = data.getDate();\n    let month = months[data.getMonth()];\n    let year = data.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`\n  } \n\n  // if there is a location, display and vice versa\n  const locationDisplay = result && (\n    <div>\n        <p>{dateBuilder(new Date())}</p>\n        <p> {result.name}, {result.sys.country}</p>\n        {result.weather.length && (\n          <p>{result.weather[0].main}</p>\n        )}\n    </div>\n  );\n\n  const currentTemperature = result ? result.main.temp : 0;\n  const weatherCondition = (result && result.weather.length) && result.weather[0].main\n  let weatherClass = (currentTemperature > 50) ? 'app-spring' : 'app'\n  if (weatherCondition === 'Clouds') {\n    weatherClass = 'app-windy'\n  }\n\n  return(\n    <main>\n      <div className={weatherClass}>\n        { errorMsg ? <div><h2 className='error-msg'>{errorMsg}</h2></div> : `${Math.round(currentTemperature)}ÂºF` }\n      </div>\n      <div className='location-box'>\n        <div className='location'> \n          {locationDisplay}\n        </div>\n      </div>\n    \n    </main>\n  );\n}\n\nexport default Temperature;\n\n","import React, {useState, useEffect } from 'react';\nimport axios from 'axios';\n\n// The location being passed in from App.js as an object-result from the user input\nconst Forecast = ({location, baseUrl}) => {\n  const FORECAST_URL = baseUrl + 'forecast?currentCity='\n\n  const [forecast, setForecast] = useState([]);\n  const[errorMsg, setErrorMsg] = useState(null);\n\n  useEffect(() => {\n    // if there is no location, exit\n    if (!location) {return}\n\n    axios(FORECAST_URL + location,  { method: 'get', mode: 'cors'})\n      .then((result) => {\n        if(parseInt(result.data.cod) === 200) {\n          setErrorMsg(null);\n          setForecast(result.data.list);\n        } else {\n          setForecast([]);\n          setErrorMsg(result.data.message);\n        }\n      })\n      .catch((error) => {\n        setErrorMsg(error.message);\n        console.log(error.message);\n      });\n  }, [location, FORECAST_URL]);\n\n  // if there is a location, display and vice versa\n  if (forecast.length === 0) { \n    return  ( \n       errorMsg ? <div><h2 className='error-msg'>{errorMsg}</h2></div> : <div>Loading...</div> \n    )\n  }\n\n  const intervals = 8\n  const arraysMaxMin = []\n\n  for (let i = 0; i < forecast.length; i++) {\n    const day = Math.floor(i/intervals)\n    // reset the temp for the day\n    if (day === arraysMaxMin.length){\n      const forecastDate =  new Date(forecast[i].dt_txt)\n      arraysMaxMin.push({max_temp: -1000, min_temp: 1000, date:forecastDate})\n    }\n\n    const currentMinTemperature =  forecast[i].main.temp_min;\n    const currentMaxTemperature = forecast[i].main.temp_max;\n\n    if (currentMaxTemperature > arraysMaxMin[day].max_temp){\n      arraysMaxMin[day].max_temp = currentMaxTemperature\n    }\n    if (currentMinTemperature < arraysMaxMin[day].min_temp){\n      arraysMaxMin[day].min_temp = currentMinTemperature\n    }\n\n  }\n\n  const dateBuilder= (data) => {\n    let months = [\n      'January', 'February', 'March', 'April', 'May', 'June', 'July', \n      'August', 'September', 'October', 'November', 'December'\n    ];\n    let days = [\n      'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'\n    ];\n\n    let day = days[data.getDay()];\n    let date = data.getDate();\n    let month = months[data.getMonth()];\n    let year = data.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`\n  } \n\n  const forecastDisplay = arraysMaxMin.map((dailyForecast, index) => (\n    <div key={index}>\n      <p>{dateBuilder(dailyForecast.date)} </p>\n      <p>{Math.round(dailyForecast.max_temp)}ÂºF</p>\n      <p>{Math.round(dailyForecast.min_temp)}ÂºF</p>\n    </div>\n  ));\n\n \n  const weatherCondition = (forecast?.length && forecast[0].weather?.length) && forecast[0].weather[0].main\n  let forecastClass = (forecast?.length && forecast[0].main.temp> 50) ? 'app-spring' : 'app'\n  if (weatherCondition === 'Clouds') {\n    forecastClass = 'app-windy'\n  }\n\n  return(\n    <main>\n      <div className={forecastClass}>\n        { forecastDisplay }\n      </div>\n      <div className='location-box'>\n        <div className='location'> \n       \n        </div>\n      </div>\n    \n    </main>\n  );\n\n}\n\nexport default Forecast;","import { Switch, Route } from 'react-router-dom';\nimport Home from './Home';\nimport Temperature from './Temperature';\nimport Forecast from './Forecast';\n\nconst Main = ({location, baseUrl}) => (\n  <Switch>\n    <Route exact path='/' component={Home}></Route>\n    <Route exact path='/temperature'>\n      <Temperature location={location} baseUrl={baseUrl} />\n    </Route>\n    <Route exact path='/forecast' >\n      <Forecast location={location} baseUrl={baseUrl}  />\n    </Route>\n  </Switch>\n);\n\nexport default Main;","import React, { useState } from 'react'; \n\nconst LocationSearchForm = (props) => {\n  const [currentCity, setCurrentCity] = useState('');\n\n  const onCitySearch = (event) => {\n    setCurrentCity(event.target.value)\n  };\n\n  const onFormSubmit = (event) => {\n    event.preventDefault();\n    props.searchCurrentCityCallBack(currentCity);\n  };\n\n  return (\n    <form className='currentCity-search-form' onSubmit={onFormSubmit}>\n      <div className='search-box'>\n        <input  \n          type='text'\n          className='search-bar'\n          placeholder='City, Country '\n          onChange={onCitySearch}\n          value={currentCity}\n        />\n      </div>\n    </form>\n  );\n\n}\n\nexport default LocationSearchForm;","import React, { useState } from 'react';\nimport './App.css';\nimport Navigation from './components/Navigation';\nimport Main from './components/Main';\nimport LocationSearchForm from './components/LocationSearchForm';\n\nlet BASE_URL =''\nif (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\n  BASE_URL =\"http://localhost:5000/\"\n} else {\n  BASE_URL= \"https://flask-backend-solo.herokuapp.com/\"\n}\n\nfunction App() {\n\n  const [location, setLocation] = useState(null);\n  const onLocationPicked = (currentCity) => {\n    setLocation(currentCity)\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <h3> This is testing deployment </h3>\n      <div className='weather-box'>\n          <div className='temp'>\n            <LocationSearchForm searchCurrentCityCallBack={ onLocationPicked } />\n            <Navigation />\n            <Main location={ location } baseUrl={ BASE_URL } />\n          </div>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'weather-icons/css/weather-icons.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}