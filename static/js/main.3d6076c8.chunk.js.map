{"version":3,"sources":["components/Navigation.js","components/Home.js","components/Temperature.js","components/Forecast.js","components/Main.js","components/LocationSearchForm.js","App.js","reportWebVitals.js","index.js"],"names":["Navigation","exact","activeClassName","to","Home","className","Temperature","location","TEMPERATURE_URL","baseUrl","useState","result","setResult","errorMsg","setErrorMsg","weatherBuilder","useCallback","city","name","country","sys","icon","weather","length","id","main","temp","temp_max","temp_min","description","useEffect","fetch","method","mode","then","response","json","cod","message","catch","error","weatherClass","locationDisplay","data","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","currentTemperature","Math","round","min","max","maxminTemp","Forecast","FORECAST_URL","forecast","setForecast","axios","parseInt","list","arraysMaxMin","i","floor","forecastDate","dt_txt","weatherIcon","push","max_temp","min_temp","currentMinTemperature","currentMaxTemperature","forecastClass","forecastDisplay","map","dailyForecast","index","Row","md","xs","Col","Container","fluid","Main","path","component","LocationSearchForm","props","currentCity","setCurrentCity","onSubmit","event","preventDefault","searchCurrentCityCallBack","type","placeholder","onChange","target","value","BASE_URL","App","setLocation","tagUrl","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3d6076c8.chunk.js","sourcesContent":["import { NavLink } from 'react-router-dom';\n\nconst Navigation = () => (\n  <nav>\n    <ul>\n      <li><NavLink exact activeClassName='current' to='/'>Home</NavLink></li>\n      <li><NavLink exact activeClassName='current' to='/temperature'>Temperature</NavLink></li>\n      <li><NavLink exact activeClassName='current' to='/forecast'>Forecast</NavLink></li>\n    </ul>\n  </nav>\n);\n\nexport default Navigation;","import React from 'react';\nimport './Home.css';\n\nconst Home = () => (\n  <div className='container'>\n    <div className='home-page app'>\n      <h4>Your home to the most trusted weather temperature and forecast</h4>\n    </div>\n  </div>\n  \n);\n\nexport default Home;","import React, { useState, useEffect, useCallback } from 'react';\nimport './Temperature.css';\nimport 'weather-icons/css/weather-icons.css';\n\n\nconst Temperature = ({location, baseUrl}) => {\n  const TEMPERATURE_URL = baseUrl + 'temperature?currentCity='\n  const[result, setResult] = useState(null);\n  const[errorMsg, setErrorMsg] = useState(null);\n  \n  const weatherBuilder = useCallback((result) => {\n    if (!result) {\n      return {}\n    }\n    const weather = { \n      city: result.name,\n      country: result.sys.country,\n      icon: (result.weather.length > 0) && (result.weather[0].id),\n      main: (result.weather.length > 0) && (result.weather[0].main),\n      temp: result.main.temp, \n      temp_max: result.main.temp_max,\n      temp_min: result.main.temp_min,\n      description: (result.weather.length > 0) && (result.weather[0].description),\n    };\n    return weather\n  }, []);\n  \n  useEffect(() => {\n    // if there is no location, exit\n    if (!location) {return}  \n\n    fetch(TEMPERATURE_URL + location,  { method: 'get', mode: 'cors'})\n      .then(response => response.json())\n      .then(result => {\n        if(result.cod === 200) {\n          setErrorMsg(null);\n          setResult(weatherBuilder(result));\n        } else {\n          setResult(null);\n          setErrorMsg(result.message);\n        }\n      })\n      .catch((error) => {\n        setErrorMsg(error.message);\n      });\n  },[location, TEMPERATURE_URL, weatherBuilder] );\n  \n  \n  const dateBuilder= (data) => {\n    let months = [\n      'January', 'February', 'March', 'April', 'May', 'June', 'July', \n      'August', 'September', 'October', 'November', 'December'\n    ];\n    let days = [\n      'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'\n    ];\n\n    let day = days[data.getDay()];\n    let date = data.getDate();\n    let month = months[data.getMonth()];\n    let year = data.getFullYear();\n\n    return `${day} ${month} ${date} ${year}`\n  } \n\n  // if there is a location, display and vice versa\n  const locationDisplay = result && (\n    <div>\n        <p>{dateBuilder(new Date())}</p>\n        <p> {result.city}, {result.country}</p>\n        {/* <p>{result.main}</p> */}\n    </div>\n  );\n\n\n  const maxminTemp = (min, max) => {\n    if (max && min) {\n      return (\n        <h4>\n          <span className=\"px-4\">L: {Math.round(min)}ÂºF</span>\n          <span className=\"px-4\">H: {Math.round(max)}ÂºF</span>\n        </h4>\n      );\n    }\n  }\n  \n  const currentTemperature = result ? result.temp : 0;\n\n  let weatherClass;\n  if (currentTemperature < 40) {\n    weatherClass = 'app';\n  }else if (currentTemperature > 40 && currentTemperature < 60) {\n    weatherClass = 'app-spring';\n  } else if (currentTemperature > 60 && currentTemperature < 70) {\n    weatherClass = 'app-autumn';\n  } else {\n    weatherClass ='app-summer';\n  }\n\n  if (result === null) { \n    return  ( \n        <div>Please enter a city to begin...</div> \n    )\n  }\n\n  return(\n    <main className={weatherClass}>\n      <div className='location-box'>\n        <div className='location'> \n          {locationDisplay}\n          <i className={`wi wi-owm-${result.icon}`}></i>\n        </div>\n      </div>\n      <div  >\n        <div className='weather-box'>\n          <div className='temp'>\n            { errorMsg ? <div><h2 className='error-msg'>{errorMsg}</h2></div> : `${Math.round(result.temp)}ÂºF`}\n            <p className='condition'>{result.main}</p>\n          </div>\n          \n          <div>{maxminTemp(result.temp_min, result.temp_max)}</div>\n        </div>\n      </div>\n    </main>\n  );\n}\n\nexport default Temperature;\n","import React, {useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col'\nimport './Forecast.css';\nimport 'weather-icons/css/weather-icons.css';\n\nconst Forecast = ({location, baseUrl}) => {\n  const FORECAST_URL = baseUrl + 'forecast?currentCity='\n\n  const [forecast, setForecast] = useState([]);\n  const[errorMsg, setErrorMsg] = useState(null);\n\n  useEffect(() => {\n    // if there is no location, exit\n    if (!location) {return}\n\n    axios(FORECAST_URL + location,  { method: 'get', mode: 'cors'})\n      .then((result) => {\n        if(parseInt(result.data.cod) === 200) {\n          setErrorMsg(null);\n          setForecast(result.data.list);\n        } else {\n          setForecast([]);\n          setErrorMsg(result.data.message);\n        }\n      })\n      .catch((error) => {\n        setErrorMsg(error.message);\n      });\n  }, [location, FORECAST_URL]);\n\n  // if there is a location, display and vice versa\n  if (forecast.length === 0) { \n    return( \n       errorMsg ? <div><h2 className='error-msg'>{errorMsg}</h2></div> : <div>Please enter a city to begin......</div> \n    )\n  }\n\n  const intervals = 8\n  const arraysMaxMin = []\n\n  for (let i = 0; i < forecast.length; i++) {\n    const day = Math.floor(i/intervals)\n    // reset the temp for the day\n    if (day === arraysMaxMin.length){\n      const forecastDate =  new Date(forecast[i].dt_txt)\n      const weatherIcon =  forecast[i].weather[0].id\n      arraysMaxMin.push({max_temp: -1000, min_temp: 1000, date:forecastDate, icon: weatherIcon})\n    }\n\n    const currentMinTemperature =  forecast[i].main.temp_min;\n    const currentMaxTemperature = forecast[i].main.temp_max;\n\n    if (currentMaxTemperature > arraysMaxMin[day].max_temp){\n      arraysMaxMin[day].max_temp = currentMaxTemperature\n    }\n    if (currentMinTemperature < arraysMaxMin[day].min_temp){\n      arraysMaxMin[day].min_temp = currentMinTemperature\n    }\n\n  }\n\n  const dateBuilder= (data) => {\n    let months = [\n      'January', 'February', 'March', 'April', 'May', 'June', 'July', \n      'August', 'September', 'October', 'November', 'December'\n    ];\n    let days = [\n      'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'\n    ];\n\n    let day = days[data.getDay()];\n    let date = data.getDate();\n    let month = months[data.getMonth()];\n    let year = data.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`\n  } \n\n  const forecastDisplay = arraysMaxMin.map((dailyForecast, index) => (\n    <Row md={1} xs={2} className='daily-forecast' key={index}> \n        <Col>{dateBuilder(dailyForecast.date)} </Col>\n        <Col><i className={`wi wi-owm-${dailyForecast.icon}`}></i></Col>\n        <Col>H: {Math.round(dailyForecast.max_temp)}ÂºF</Col>\n        <Col>L: {Math.round(dailyForecast.min_temp)}ÂºF</Col>\n    </Row>\n  ));\n\n  const currentTemperature = (forecast?.length && forecast[0].weather?.length) && forecast[0].main.temp\n  let forecastClass;\n\n  if (currentTemperature < 40) {\n    forecastClass = 'app';\n  }else if (currentTemperature > 40 && currentTemperature < 60) {\n    forecastClass = 'app-spring';\n  } else if (currentTemperature > 60 && currentTemperature < 70) {\n    forecastClass = 'app-autumn';\n  } else {\n    forecastClass ='app-summer';\n  }\n\n  return(\n    <Container fluid className={forecastClass}>\n      { forecastDisplay }\n    </Container>\n  );\n\n}\n\nexport default Forecast;","import { Switch, Route } from 'react-router-dom';\nimport Home from './Home';\nimport Temperature from './Temperature';\nimport Forecast from './Forecast';\n\nconst Main = ({location, baseUrl}) => (\n\n  <Switch>\n    <Route exact path='/' component={Home}></Route>\n    <Route exact path='/temperature'>\n      <Temperature location={location} baseUrl={baseUrl} />\n    </Route>\n    <Route exact path='/forecast' >\n      <Forecast location={location} baseUrl={baseUrl}  />\n    </Route>\n  </Switch>\n);\n\nexport default Main;","import React, { useState } from 'react'; \nimport './LocationSearchForm.css';\n\nconst LocationSearchForm = (props) => {\n  const [currentCity, setCurrentCity] = useState('');\n\n  const onCitySearch = (event) => {\n    setCurrentCity(event.target.value)\n  };\n\n  const onFormSubmit = (event) => {\n    event.preventDefault();\n    props.searchCurrentCityCallBack(currentCity);\n  };\n\n  return (\n    <form className='currentCity-search-form' onSubmit={onFormSubmit}>\n      <div className='search-box'>\n        <input  \n          type='text'\n          className='search-bar'\n          placeholder='City, Country '\n          onChange={onCitySearch}\n          value={currentCity}\n        />\n      </div>\n    </form>\n  );\n\n}\n\nexport default LocationSearchForm;","import React, { useState } from 'react';\n// import { Link } from 'react-router-dom';\nimport './App.css';\nimport Navigation from './components/Navigation';\nimport Main from './components/Main';\nimport LocationSearchForm from './components/LocationSearchForm';\nimport Container from 'react-bootstrap/Container';\n\nlet BASE_URL =''\nif (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\n  BASE_URL =\"http://localhost:5000/\"\n} else {\n  BASE_URL= \"https://flask-backend-solo.herokuapp.com/\"\n}\n\nfunction App() {\n\n  const [location, setLocation] = useState(null);\n  const onLocationPicked = (currentCity) => {\n    setLocation(currentCity)\n  }\n  \n  const tagUrl ='https://seattlefurby17.github.io/weather-wizard';\n\n  return (\n    <Container className=\"App\">\n      <div className=\"typewriter\">\n        <h1>Welcome to Solo Weather Station</h1>\n      </div>\n      <LocationSearchForm searchCurrentCityCallBack={ onLocationPicked } />\n      <Navigation />\n      <Main location={ location } baseUrl={ BASE_URL } />\n  \n      <footer className=\"footer\">\n        <a className='text' href={tagUrl}> Copyright</a>\n        <a className='text' href={tagUrl}>All Rights Reserved</a>\n        <a className='text' href={tagUrl}>Terms of Uses</a>\n        <a className='text' href={tagUrl}>HanhSolo</a>\n      </footer>\n\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}